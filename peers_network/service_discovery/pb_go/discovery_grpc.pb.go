// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: discovery.proto

package pb_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PeerDiscovery_GetSessions_FullMethodName = "/PeerDiscovery/GetSessions"
	PeerDiscovery_GetPeer_FullMethodName     = "/PeerDiscovery/GetPeer"
	PeerDiscovery_GetPeers_FullMethodName    = "/PeerDiscovery/GetPeers"
	PeerDiscovery_JoinSession_FullMethodName = "/PeerDiscovery/JoinSession"
)

// PeerDiscoveryClient is the client API for PeerDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerDiscoveryClient interface {
	GetSessions(ctx context.Context, in *ServiceQuery, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Session], error)
	GetPeer(ctx context.Context, in *JoinInfo, opts ...grpc.CallOption) (*Peer, error)
	GetPeers(ctx context.Context, in *JoinInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Peer], error)
	JoinSession(ctx context.Context, in *JoinInfo, opts ...grpc.CallOption) (*JoinResult, error)
}

type peerDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerDiscoveryClient(cc grpc.ClientConnInterface) PeerDiscoveryClient {
	return &peerDiscoveryClient{cc}
}

func (c *peerDiscoveryClient) GetSessions(ctx context.Context, in *ServiceQuery, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Session], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PeerDiscovery_ServiceDesc.Streams[0], PeerDiscovery_GetSessions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ServiceQuery, Session]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PeerDiscovery_GetSessionsClient = grpc.ServerStreamingClient[Session]

func (c *peerDiscoveryClient) GetPeer(ctx context.Context, in *JoinInfo, opts ...grpc.CallOption) (*Peer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Peer)
	err := c.cc.Invoke(ctx, PeerDiscovery_GetPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerDiscoveryClient) GetPeers(ctx context.Context, in *JoinInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Peer], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PeerDiscovery_ServiceDesc.Streams[1], PeerDiscovery_GetPeers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JoinInfo, Peer]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PeerDiscovery_GetPeersClient = grpc.ServerStreamingClient[Peer]

func (c *peerDiscoveryClient) JoinSession(ctx context.Context, in *JoinInfo, opts ...grpc.CallOption) (*JoinResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResult)
	err := c.cc.Invoke(ctx, PeerDiscovery_JoinSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerDiscoveryServer is the server API for PeerDiscovery service.
// All implementations must embed UnimplementedPeerDiscoveryServer
// for forward compatibility.
type PeerDiscoveryServer interface {
	GetSessions(*ServiceQuery, grpc.ServerStreamingServer[Session]) error
	GetPeer(context.Context, *JoinInfo) (*Peer, error)
	GetPeers(*JoinInfo, grpc.ServerStreamingServer[Peer]) error
	JoinSession(context.Context, *JoinInfo) (*JoinResult, error)
	mustEmbedUnimplementedPeerDiscoveryServer()
}

// UnimplementedPeerDiscoveryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPeerDiscoveryServer struct{}

func (UnimplementedPeerDiscoveryServer) GetSessions(*ServiceQuery, grpc.ServerStreamingServer[Session]) error {
	return status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedPeerDiscoveryServer) GetPeer(context.Context, *JoinInfo) (*Peer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeer not implemented")
}
func (UnimplementedPeerDiscoveryServer) GetPeers(*JoinInfo, grpc.ServerStreamingServer[Peer]) error {
	return status.Errorf(codes.Unimplemented, "method GetPeers not implemented")
}
func (UnimplementedPeerDiscoveryServer) JoinSession(context.Context, *JoinInfo) (*JoinResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinSession not implemented")
}
func (UnimplementedPeerDiscoveryServer) mustEmbedUnimplementedPeerDiscoveryServer() {}
func (UnimplementedPeerDiscoveryServer) testEmbeddedByValue()                       {}

// UnsafePeerDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerDiscoveryServer will
// result in compilation errors.
type UnsafePeerDiscoveryServer interface {
	mustEmbedUnimplementedPeerDiscoveryServer()
}

func RegisterPeerDiscoveryServer(s grpc.ServiceRegistrar, srv PeerDiscoveryServer) {
	// If the following call pancis, it indicates UnimplementedPeerDiscoveryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PeerDiscovery_ServiceDesc, srv)
}

func _PeerDiscovery_GetSessions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeerDiscoveryServer).GetSessions(m, &grpc.GenericServerStream[ServiceQuery, Session]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PeerDiscovery_GetSessionsServer = grpc.ServerStreamingServer[Session]

func _PeerDiscovery_GetPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerDiscoveryServer).GetPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerDiscovery_GetPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerDiscoveryServer).GetPeer(ctx, req.(*JoinInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerDiscovery_GetPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeerDiscoveryServer).GetPeers(m, &grpc.GenericServerStream[JoinInfo, Peer]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PeerDiscovery_GetPeersServer = grpc.ServerStreamingServer[Peer]

func _PeerDiscovery_JoinSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerDiscoveryServer).JoinSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerDiscovery_JoinSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerDiscoveryServer).JoinSession(ctx, req.(*JoinInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// PeerDiscovery_ServiceDesc is the grpc.ServiceDesc for PeerDiscovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerDiscovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PeerDiscovery",
	HandlerType: (*PeerDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeer",
			Handler:    _PeerDiscovery_GetPeer_Handler,
		},
		{
			MethodName: "JoinSession",
			Handler:    _PeerDiscovery_JoinSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSessions",
			Handler:       _PeerDiscovery_GetSessions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPeers",
			Handler:       _PeerDiscovery_GetPeers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "discovery.proto",
}
